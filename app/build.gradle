/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.13/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

javafx {
    version = '21.0.2'
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava

    implementation 'com.google.code.gson:gson:2.10.1'   // Gson

    // JavaFX (modular)
    def javafxVersion = '21.0.2'
    def platform = org.gradle.internal.os.OperatingSystem.current().isWindows() ? 'win' :
                   org.gradle.internal.os.OperatingSystem.current().isMacOsX() ? 'mac' :
                   'linux'

    implementation "org.openjfx:javafx-controls:${javafxVersion}:${platform}"
    implementation "org.openjfx:javafx-fxml:${javafxVersion}:${platform}"

    implementation 'org.mindrot:jbcrypt:0.4'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'library.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compileClasspath
}
